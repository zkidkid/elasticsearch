---
"Basic reindex from remote":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
          dest:
            index: dest
  - match: {created: 1}
  - match: {updated: 0}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - match: {throttled_millis: 0}
  - gte: { took: 0 }
  - is_false: task
  - is_false: deleted

  - do:
      search:
        index: dest
        body:
          query:
            match:
              text: test
  - match: {hits.total: 1}

---
"Reindex from remote with query":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      index:
        index:   source
        type:    foo
        id:      2
        body:    { "text": "test2" }
  - do:
      indices.refresh: {}

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
            query:
              match:
                text: test2
          dest:
            index: dest
  - match: {created: 1}

  - do:
      search:
        index: dest
        body:
          query:
            match_all: {}
  - match: {hits.total: 1}

---
"Reindex from remote with routing":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
        routing: foo
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
          dest:
            index: dest
  - match: {created: 1}

  - do:
      search:
        index: dest
        routing: foo
        body:
          query:
            match:
              text: test
  - match: {hits.total: 1}

---
"Reindex from remote with parent/child":
  - do:
      indices.create:
          index: source
          body:
              mappings:
                foo: {}
                bar:
                  _parent:
                    type:  foo
  - do:
      indices.create:
          index: dest
          body:
              mappings:
                foo: {}
                bar:
                  _parent:
                    type:  foo
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      index:
        index:   source
        type:    bar
        id:      1
        parent:  1
        body:    { "text": "test2" }
  - do:
      indices.refresh: {}

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
          dest:
            index: dest
  - match: {created: 2}

  - do:
      search:
        index: dest
        body:
          query:
            has_parent:
              parent_type: foo
              query:
                match:
                  text: test
  - match: {hits.total: 1}
