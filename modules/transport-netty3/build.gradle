/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 TODOs:
   * fix permissions such that only netty3 can open sockets etc?
   * fix the hack in the build framework that copies transport-netty3 into the integ test cluster
   * maybe figure out a way to run all tests from core with netty3/network?
 */
esplugin {
    description 'Netty 3 based transport implementation'
    classname 'org.elasticsearch.transport.Netty3Plugin'
    hasClientJar = true
}

compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked"

dependencies {
    // network stack
    compile 'io.netty:netty:3.10.6.Final'
}

integTest {
    includePackaged = true
    cluster {
        setting 'http.type', 'netty3'
        setting 'transport.type', 'netty3'
        numNodes = 2
    }
}

thirdPartyAudit.excludes = [
        // uses internal java api: sun.security.x509 (X509CertInfo, X509CertImpl, X500Name)
        'org.jboss.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator',
        // classes are missing

        // from org.jboss.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder (netty)
        'com.google.protobuf.CodedInputStream',

        // from org.jboss.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender (netty)
        'com.google.protobuf.CodedOutputStream',

        // from org.jboss.netty.handler.codec.protobuf.ProtobufDecoder (netty)
        'com.google.protobuf.ExtensionRegistry',
        'com.google.protobuf.MessageLite$Builder',
        'com.google.protobuf.MessageLite',
        'com.google.protobuf.Parser',

        // from org.jboss.netty.channel.socket.http.HttpTunnelingServlet (netty)
        'javax.servlet.ServletConfig',
        'javax.servlet.ServletException',
        'javax.servlet.ServletOutputStream',
        'javax.servlet.http.HttpServlet',
        'javax.servlet.http.HttpServletRequest',
        'javax.servlet.http.HttpServletResponse',

        // from org.jboss.netty.logging.CommonsLoggerFactory (netty)
        'org.apache.commons.logging.Log',
        'org.apache.commons.logging.LogFactory',

        // from org.jboss.netty.handler.ssl.OpenSslEngine (netty)
        'org.apache.tomcat.jni.Buffer',
        'org.apache.tomcat.jni.Library',
        'org.apache.tomcat.jni.Pool',
        'org.apache.tomcat.jni.SSL',
        'org.apache.tomcat.jni.SSLContext',

        // from org.jboss.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator (netty)
        'org.bouncycastle.asn1.x500.X500Name',
        'org.bouncycastle.cert.X509v3CertificateBuilder',
        'org.bouncycastle.cert.jcajce.JcaX509CertificateConverter',
        'org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder',
        'org.bouncycastle.jce.provider.BouncyCastleProvider',
        'org.bouncycastle.operator.jcajce.JcaContentSignerBuilder',

        // from org.jboss.netty.handler.ssl.JettyNpnSslEngine (netty)
        'org.eclipse.jetty.npn.NextProtoNego$ClientProvider',
        'org.eclipse.jetty.npn.NextProtoNego$ServerProvider',
        'org.eclipse.jetty.npn.NextProtoNego',

        // from org.jboss.netty.logging.JBossLoggerFactory (netty)
        'org.jboss.logging.Logger',

        // from org.jboss.netty.handler.codec.marshalling.ChannelBufferByteInput (netty)
        'org.jboss.marshalling.ByteInput',

        // from org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput (netty)
        'org.jboss.marshalling.ByteOutput',

        // from org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingEncoder (netty)
        'org.jboss.marshalling.Marshaller',

        // from org.jboss.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider (netty)
        'org.jboss.marshalling.MarshallerFactory',
        'org.jboss.marshalling.MarshallingConfiguration',
        'org.jboss.marshalling.Unmarshaller',

        // from org.jboss.netty.container.osgi.NettyBundleActivator (netty)
        'org.osgi.framework.BundleActivator',
        'org.osgi.framework.BundleContext',

        // from org.jboss.netty.logging.OsgiLoggerFactory$1 (netty)
        'org.osgi.framework.ServiceReference',
        'org.osgi.service.log.LogService',
        'org.osgi.util.tracker.ServiceTracker',
        'org.osgi.util.tracker.ServiceTrackerCustomizer',

        // from org.jboss.netty.util.internal.logging.InternalLoggerFactory (netty) - it's optional
        'org.slf4j.Logger',
        'org.slf4j.LoggerFactory',
]
