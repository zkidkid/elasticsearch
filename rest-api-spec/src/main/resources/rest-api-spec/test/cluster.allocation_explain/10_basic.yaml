---
"cluster shard allocation explanation test":
  - do:
      # there aren't any unassigned shards to explain
      catch: /unable to find any shards to explain/
      cluster.allocation_explain: {}

  - do:
      indices.create:
        index: test

  - do:
      cluster.state:
        metric: [ master_node ]

  - set: {master_node: node_id}

    # This relies on there only being a single node in the test cluster, which
    # is currently true, but if this changes in the future this test will need
    # to be changed
  - do:
      cluster.allocation_explain:
        body: { "index": "test", "shard": 0, "primary": true }

  - match: { assigned: true }
  # - match: { assigned_node_id: $node_id }
  - is_true: assigned_node_id
  - match: { shard.index: "test" }
  - match: { shard.id: 0 }
  - match: { shard.primary: true }
  # unfortunately can't test these because they break with multi-node backwords
  # compat REST tests
  # - is_true: nodes.$node_id.node_name
  # - match: { nodes.$node_id.node_attributes.testattr: "test" }
  # - match: { nodes.$node_id.node_attributes.portsfile: "true" }
  # - match: { nodes.$node_id.final_decision: "CURRENTLY_ASSIGNED" }
  # - match: { nodes.$node_id.weight: 0.0 }
  # - match: { nodes.$node_id.decisions.0.decider: "same_shard" }
  # - match: { nodes.$node_id.decisions.0.decision: "NO" }

---
"cluster shard allocation explanation test with empty request":
  - do:
      indices.create:
        index: test
        body: { "index.number_of_shards": 1, "index.number_of_replicas": 9 }

  - do:
      cluster.state:
        metric: [ master_node ]

  - set: {master_node: node_id}

  - do:
      cluster.allocation_explain:
        include_disk_info: true

  - match: { assigned: false }
  - match: { unassigned_info.reason: "INDEX_CREATED" }
  - is_true: unassigned_info.at
  - match: { shard.index: "test" }
  - match: { shard.id: 0 }
  - match: { shard.primary: false }
  - is_true: cluster_info
  # - is_true: nodes.$node_id.node_name
  # - match: { nodes.$node_id.node_attributes.testattr: "test" }
  # - match: { nodes.$node_id.node_attributes.portsfile: "true" }
  # - match: { nodes.$node_id.final_decision: "NO" }
  # - match: { nodes.$node_id.decisions.0.decider: "same_shard" }
  # - match: { nodes.$node_id.decisions.0.decision: "NO" }
